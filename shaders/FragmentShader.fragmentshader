#version 330 core

in vec2 UV;
in vec3 fragmentColor;
in vec3 Normal;
in vec3 FragPos;

out vec3 color;

uniform sampler2D myTextureSampler;
uniform int useTexture;
uniform int isRainbow;
uniform int prevColor; // 0: normal 1: fragmentColor, 2: textureColor
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 ambientMaterial;
uniform vec3 diffuseMaterial;
uniform vec3 specularMaterial;
uniform float shininess;
uniform float mixFactor;

void main()
{
    vec3 lightColor = vec3(1.0, 1.0, 1.0);
    vec3 ambient = ambientMaterial * lightColor;
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);

    // lambertian reflection model
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diffuseMaterial * diff * lightColor;

    // phong reflection model
    vec3 viewDir = normalize(-FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specular = specularMaterial * spec * lightColor;

    vec3 result = ambient + diffuse + specular;
    vec3 textureColor = texture(myTextureSampler, UV).rgb;
    if (useTexture > 0 && isRainbow <= 0) {
        switch (prevColor) {
        case 1: // raibow to texture
            result *= mix(fragmentColor, textureColor, mixFactor);
            break;
        case 0: // normal to texture
            result *= mix(vec3(1.0, 1.0, 1.0), textureColor, mixFactor);
            break;
        }
    } else if (useTexture <= 0 && isRainbow > 0) {
        switch (prevColor) {
        case 2: // texture to fragmentColor
            result *= mix(textureColor, fragmentColor, mixFactor);
            break;
        case 0: // normal to fragmentColor
            result *= mix(vec3(1.0, 1.0, 1.0), fragmentColor, mixFactor);
            break;
        }
    } else if (useTexture > 0 && isRainbow > 0) {
        switch (prevColor) {
        case 0: // normal to raibow
            result *= mix(vec3(1.0, 1.0, 1.0), fragmentColor, mixFactor);
            break;
        case 1: // raibow to texture
            result *= mix(fragmentColor, textureColor, mixFactor);
            break;
        case 2: // texture to raibow
            result *= mix(textureColor, fragmentColor, mixFactor);
            break;
    }
    } else if (useTexture <= 0 && isRainbow <= 0) {
        vec3 baseColor = vec3(1.0, 1.0, 1.0);
        switch (prevColor) {
        case 1: // raibow to baseColor
            result *= mix(fragmentColor, baseColor, mixFactor);
            break;
        case 2: // texture to baseColor
            result *= mix(textureColor, baseColor, mixFactor);
            break;
        }
    }
    color = result;
}