#version 330 core

in vec2 UV;
in vec3 fragmentColor;
in vec3 Normal;
in vec3 FragPos;

out vec3 color;

uniform sampler2D myTextureSampler;
uniform int useTexture;
uniform int isRainbow;
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 ambientMaterial;
uniform vec3 diffuseMaterial;
uniform vec3 specularMaterial;
uniform float shininess;

void main()
{
    vec3 lightColor = vec3(1.0, 1.0, 1.0); // 光源の色
    vec3 ambient = ambientMaterial * lightColor;
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);

    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diffuseMaterial * diff * lightColor;

    vec3 viewDir = normalize(-FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specular = specularMaterial * spec * lightColor;

    vec3 result = ambient + diffuse + specular;
    if (useTexture > 0) {
        result *= texture(myTextureSampler, UV).rgb;
    } else {
        if (isRainbow > 0) {
            result *= fragmentColor;
        } else {
            result *= vec3(1.0, 1.0, 1.0);
        }
    }
    color = result;
}